Todo:

- make a pipeline for a background for when the GUI is on the screen
    - a vignette effect could be cool
    - animate the vignette on transition (have to play with time)

- make the game respect one static aspect ratio regardless of window res
    - black bars

- figure out post-processing!

-----------------------------------------------------------------

Notes:

Note 1:

pattern for rendering anything in wgpu:

init stage:

- create all the uniform buffers
- create the vertex buffer
- store the relevant data that will be used to write to all the buffers
- create the pipeline

somewhere else, maybe every frame:

- you write to all the uniform and vertex buffers

then every frame

- you render

Note 2:

GUI calling api (maybe):

// menu will be a vertical list of buttons (boxes with text) 
//      and optionally a header
GUI::draw_menu() 
  .centered()
  .pos(vec2::new(20.0,20.0))
  .header("WGPU tetris")
  .button("Play")
  .button("Info")
  .button("Credits")
  .select(selected_button) //selected_button is gonna be where the "cursor" is on the menu (controller or mouse pointer)
  .on_button_click(|index| {
      println!("you clicked the button number {index}");
  })
  .build()

// simpler (not builder pattern but it's the same thing but simpler)

draw_menu(MenuDescriptor {
    centered: true,
    pos: v2::new(20.0,20.0),
    // [...]
    ..Default::default()
});



Note 3:

generalize pipeline creation:

create_rendererer(RendererDescriptor{
    buffers:
    shader: "shaders/blabla.wgsl",

    
    ..Default::default()
})

Note 4: 

tween system

fn tween_update(t, dt) {
    t.t += duration / dt;
}

fn tween_get_value(t) {
    //linear function

    let t = match t.ease_func {
        Linear => {
            t
        }
        CircOut => {
            sqrt(1 - pow(t - 1, 2));
        }
    }

    t.start * (1 - t.t) + t.end * t.t
}


//in your game update loop
fn game_update() {
    for t in tweens {
        t.update(dt)
    }
}

struct tween{
    initial_value,
    end_value
    current_value,
}

then you pass the magic number each frame to the gui

gui_bind_layout(gui, Layout::VerticalCentered(v2::new(200.0, 80.0), anim_vec)); (anim vec would be to offset the position for the anim)
